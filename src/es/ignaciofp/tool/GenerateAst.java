package es.ignaciofp.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {

    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output directory>");
            System.exit(64);
        }
        String outputDir = args[0];
        defineAst(outputDir, "Expr", Arrays.asList(
            "Assign   : Token name, Expr value",
            "Binary   : Expr left, Token operator, Expr right",
            "Grouping : Expr expression",
            "Literal  : Object value",
            "Unary    : Token operator, Expr right",
            "Variable : Token name"
        ));

        defineAst(outputDir, "Stmt", Arrays.asList(
            "Block      : List<Stmt> statements",
            "Expression : Expr expression",
            "Print      : Expr expression",
            "Var        : Token name, Expr initializer"
        ));
        
    }

    private static void defineAst (
        String outputDir, String baseName, List<String> types)
        throws IOException {
            String path = String.format("%s/%s.java", outputDir, baseName);
            PrintWriter writer = new PrintWriter(path, "UTF-8");

            writer.println("//");
            writer.println("// Code generated by 'es.ignaciofp.tool.GenerateAst'");
            writer.println("//");
            writer.println("package es.ignaciofp.lox;");
            writer.println();
            writer.println("import java.util.List;");
            writer.println();
            writer.println(String.format("public abstract class %s {", baseName));

            defineVisitor(writer, baseName, types);

            for (String type : types) {
                String className = type.split(":")[0].trim();
                String fields = type.split(":")[1].trim();
                defineType(writer, baseName, className, fields);
                writer.println();
            }

            writer.println("\tpublic abstract <R> R accept(Visitor<R> visitor);");

            writer.println("}");
            writer.close();
    }

    private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) {
        writer.println(String.format("\tpublic static class %s extends %s {", className, baseName));

        // Fields
        String[] fields = fieldList.split(", ");
        for (String field : fields) {
            writer.println(String.format("\t\tpublic final %s;", field));
        }

        writer.println();

        // Constructor
        writer.println(String.format("\t\tpublic %s(%s) {", className, fieldList));

        for (String field : fields) {
            String name = field.split(" ")[1];
            writer.println(String.format("\t\t\tthis.%s = %s;", name, name));
        }

        writer.println("\t\t}");

        writer.println();
        writer.println("\t\t@Override");
        writer.println("\t\tpublic <R> R accept(Visitor<R> visitor) {");
        writer.println(String.format("\t\t\treturn visitor.visit%s%s(this);", className, baseName));
        writer.println("\t\t}");

        writer.println("\t}");
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
        writer.println("\tpublic interface Visitor<R> {");

        for (String type : types) {
            String typeName = type.split(":")[0].trim();
            writer.println(String.format("\t\tpublic R visit%s%s(%s %s);", typeName, baseName, typeName, baseName.toLowerCase()));
        }
        writer.println("\t}");
    }
}
